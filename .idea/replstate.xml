<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1492504066512">{:repl-history {:ide [], :local [{:command &quot;(s/def :num/known-valid-single\n  (s/and &lt; 10 keyword?))&quot;, :offset 55, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(map #(s/valid? :num/known-valid-single %) (range 5))&quot;, :offset 53, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(s/def :num/known-valid-single\n  (s/and &lt; 10 keyword?))\n\n(map #(s/valid? :num/known-valid-single %) (range 5))\n&quot;, :offset 111, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;\&quot;for a sample of known correct values 1 - 19\&quot;\n(s/def :num/known-valid-single\n  (s/and #(&lt; % 10) keyword?))\n\n(map #(s/valid? :num/known-valid-single %) (range 5))\n&quot;, :offset 162, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(map #(s/valid? :num/known-valid-single %) \n     (map #(num-representation %) (range 5)))&quot;, :offset 89, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;\&quot;for a sample of known correct values 1 - 19\&quot;\n(s/def :num/known-valid-single\n  (s/and :num/number #(&lt; % 10) keyword?))\n\n(map #(s/valid? :num/known-valid-single %)\n     (map #(num-representation %) (range 5)))\n&quot;, :offset 209, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;\&quot;for a sample of known correct values 1 - 19\&quot;\n(s/def :num/known-valid-single\n  (s/and :num/number #(&lt; % 10) keyword?))\n\n(map #(s/valid? :num/known-valid-single %)\n     (map #(num-representation %) (range 1 10)))\n&quot;, :offset 212, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;\&quot;for a sample of known correct values 1 - 19\&quot;\n(s/def :num/known-valid-single\n  (s/and #(:num/number %) #(&lt; % 10) keyword?))\n\n(map #(s/valid? :num/known-valid-single %)\n     (map #(num-representation %) (range 1 10)))\n&quot;, :offset 217, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(map #(s/conform :num/known-valid-single %)\n     (map #(num-representation %) (range 1 10)))&quot;, :offset 92, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;\&quot;for a sample of known correct values 1 - 19\&quot;\n(s/def :num/known-valid-single\n  (s/and #(&lt; % 10) keyword?))\n\n(map #(s/valid? :num/known-valid-single %)\n     (map #(num-representation %) (range 1 10)))\n&quot;, :offset 200, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;\&quot;for a sample of known correct values 1 - 19\&quot;\n(s/def :num/known-valid-single\n  (s/and #(get singles %) keyword?))\n\n(map #(s/valid? :num/known-valid-single %)\n     (map #(num-representation %) (range 1 10)))\n&quot;, :offset 207, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(map #(s/explain :num/known-valid-single %)\n     (map #(num-representation %) (range 1 10)))&quot;, :offset 92, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;singles&quot;, :offset 7, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;\&quot;for a sample of known correct values 1 - 19\&quot;\n(s/def :num/known-valid-single\n  (s/and #(get x10 %) keyword?))\n\n(map #(s/explain :num/known-valid-single %)\n     (map #(num-representation %) (range 1 10)))\n&quot;, :offset 204, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;\&quot;for a sample of known correct values 1 - 19\&quot;\n(s/def :num/known-valid-single\n  (s/and #(get x1 %) keyword?))\n\n(map #(s/explain :num/known-valid-single %)\n     (map #(num-representation %) (range 1 10)))\n&quot;, :offset 203, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;x1&quot;, :offset 2, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(:one x1)&quot;, :offset 9, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(filter :one x1)&quot;, :offset 13, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(filter #(= % :one) x1)&quot;, :offset 14, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;\&quot;for a sample of known correct values 1 - 19\&quot;\n(s/def :num/known-valid-single\n  (s/and #(get inverse-singles %) keyword?))\n\n(map #(s/explain :num/known-valid-single %)\n     (map #(num-representation %) (range 1 10)))\n&quot;, :offset 216, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(inverse-singles)&quot;, :offset 17, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;inverse-singles&quot;, :offset 15, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(get inverse-singles :one)&quot;, :offset 26, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(s/def :num/known-valid-single\n  (s/and #(get inverse-singles %) keyword?))\n&quot;, :offset 76, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(map #(s/explain :num/known-valid-single %)\n     (map #(num-representation %) (range 1 10)))\n&quot;, :offset 93, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(map #(s/explain :num/known-valid-single %)\n     (map #(first (num-representation %)) (range 1 10)))\n&quot;, :offset 101, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(map #(s/valid? :num/known-valid-single %)\n     (map #(first (num-representation %)) (range 1 10)))&quot;, :offset 99, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(map #(s/valid? :num/known-valid-single %)\n     (map #(first (num-representation %)) (range 1 20)))&quot;, :offset 99, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(map #(s/valid? :num/known-valid-x10 %)\n     (map #(first (num-representation %)) (range 10 99 10)))&quot;, :offset 100, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(s/def :num/known-valid-x10\n  (s/and #(get inverse-tens %) keyword?))\n\n(map #(s/valid? :num/known-valid-x10 %)\n     (map #(first (num-representation %)) (range 10 99 10)))\n&quot;, :offset 172, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(s/def :num/known-valid-x10\n  (s/and #(get inverse-tens %) keyword?))\n\n(map #(s/valid? :num/known-valid-x10 %)\n     (map #(first (num-representation %)) (range 20 91 10)))\n\n&quot;, :offset 173, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(map #(first (num-representation %)) (range 1 100))&quot;, :offset 49} {:command &quot;(map #(num-representation %)\n     (random-sample 0.001 (range 100 1000)))&quot;, :offset 34, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(s/def :num/good-wc-100-to-1k\n  (s/or #(= 4 (count %)) #(= 5 (count %))))\n\n(map #(s/valid? :num/good-wc-100-to-1k %)\n     (map #(num-representation %) (random-sample 0.005 (range 100 1000))))&quot;, :offset 191, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(s/def :num/good-wc-100-to-1k\n  (s/or #(= 4 (count %)) #(= 5 (count %))))\n&quot;, :offset 74, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(s/def :num/good-wc-100-to-1k\n  (s/and (or #(= 4 (count %)) \n             #(= 5 (count %)))))&quot;, :offset 93, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(s/def :num/good-wc-100-to-1k\n  (s/and (or :words-4 #(= 4 (count %))\n             :words-5 #(= 5 (count %)))))&quot;, :offset 110, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(map #(s/valid? :num/good-wc-100-to-1k %)\n     (map #(num-representation %) (random-sample 0.005 (range 100 1000))))&quot;, :offset 116, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(s/def :num/good-wc-100-to-1k\n  (s/or :words-4 #(= 4 (count %))\n        :words-5 #(= 5 (count %))))\n\n(map #(s/valid? :num/good-wc-100-to-1k %)\n     (map #(num-representation %) (random-sample 0.005 (range 100 1000))))&quot;, :offset 217, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(s/def :num/good-wc-121-200 #(= 5 (count %)))\n\n(map #(s/valid? :num/good-wc-121-200 %)\n     (map #(num-representation %) (random-sample 0.1 (range 121 200))))&quot;, :offset 158, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(distinct\n  (map #(s/valid? :num/good-wc-121-200 %)\n       (map #(num-representation %) (random-sample 0.1 (range 121 200)))))&quot;, :offset 126, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;; odd numbers between 121 and 200 are five words\n(s/def :num/good-wc-121-200 #(= 5 (count %)))\n\n(distinct\n  (map #(s/valid? :num/good-wc-121-200 %)\n       (map #(num-representation %) (random-sample 0.1 (range 121 200)))))&quot;, :offset 222, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(distinct\n  (map #(s/valid? :num/good-wc-121-200 %)\n       (map #(num-representation %) (random-sample 0.5 (range 121 200)))))&quot;, :offset 126, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(map #(num-representation %)\n     (random-sample 0.005 (range 100 1000)))&quot;, :offset 25} {:command &quot;(map #(num-representation %) (random-sample 0.5 (range 121 200)))&quot;, :offset 0, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(map #(num-representation %) (filter odd? (random-sample 0.5 (range 121 200))))&quot;, :offset 42, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(distinct\n  (map #(s/valid? :num/good-wc-121-200 %)\n       (map #(num-representation %) \n            (filter odd? (random-sample 0.5 (range 121 200))))))&quot;, :offset 153, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(num-representation 1001)&quot;, :offset 24, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(num-representation 2001)&quot;, :offset 21, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(num-representation 2021)&quot;, :offset 24, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(num-representation 200021)&quot;, :offset 24, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(num-representation 2000021)&quot;, :offset 25, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(def case1 (num-representation 200021))&quot;, :offset 11, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(def case2 (num-representation 200020))&quot;, :offset 37, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;case1&quot;, :offset 5, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;case2&quot;, :offset 5, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(def case3 (num-representation 1001))&quot;, :offset 34, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(let [last-num (last case3)]\n  (if (or (get singles last-num) (get tens last-num))))&quot;, :offset 84, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(let [last-num (last case3)]\n  (if (or (get singles last-num) (get tens last-num))\n    (concat (drop-last case3) and last-num)))&quot;, :offset 126, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(let [last-num (last case3)]\n  (if (or (get singles last-num) (get tens last-num))\n    (concat (drop-last case3) [:and] last-num)))&quot;, :offset 119, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;case3&quot;, :offset 5, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(let [last-num (last case3)]\n  (println last-num)\n  (when (or (get singles last-num) (get tens last-num))\n    (concat (drop-last case3) [:and] last-num)))&quot;, :offset 48, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(let [last-num (last case3)]\n  (when (or (get singles last-num) (get tens last-num))\n    [(drop-last case3) [:and] last-num]))&quot;, :offset 90, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(let [last-num (last case3)]\n  (when (or (get singles last-num) (get tens last-num))\n    (str [(drop-last case3) [:and] last-num])))&quot;, :offset 94, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(let [last-num (last case3)]\n  (when (or (get singles last-num) (get tens last-num))\n    (println (drop-last case3) [:and] last-num)))&quot;, :offset 97, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(defn chunk [num]\n  (let [last-num (last num)]\n    (when (or (get singles last-num) (get tens last-num))\n      (println (drop-last num) [:and] last-num))))&quot;, :offset 155, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(defn nk [num]\n  (let [last-num (last num)]\n    (when (or (get singles last-num) (get tens last-num))\n      (println (drop-last num) [:and] last-num))))&quot;, :offset 6, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(defn nk [num]\n  (let [last-num (last num)]\n    (when (or (get singles last-num) (get tens last-num))\n      (drop-last num))))&quot;, :offset 123, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(drop-last case3)&quot;, :offset 17, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(or (get singles :one) 2)&quot;, :offset 25, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(defn nk [num]\n  (let [last-num (last num)]\n    (when (or (get inverse-singles last-num)\n              (get inverse-tens last-num))\n      (drop-last num))))&quot;, :offset 156, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(defn nk [num]\n  (let [last-num (last num)]\n    (when (or (get inverse-singles last-num)\n              (get inverse-tens last-num))\n      (concat (drop-last num) [:and] last-num))))&quot;, :offset 177, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(defn nk [num]\n  (let [last-num (last num)]\n    (when (or (get inverse-singles last-num)\n              (get inverse-tens last-num))\n      (concat (drop-last num) [:and] (last num)))))&quot;, :offset 179, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(defn nk [num]\n  (let [last-num (last num)]\n    (when (or (get inverse-singles last-num)\n              (get inverse-tens last-num))\n      (concat (drop-last num) [:and] (take-last 1 num)))))&quot;, :offset 181, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(nk case3)&quot;, :offset 10, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(defn insert-and [num]\n  (let [last-num (last num)\n        butlast-num (butlast num)]\n    (if-let [last (or (get inverse-singles last-num)\n                      (get inverse-tens last-num))]\n      (concat (drop-last num) [:and] (take-last num))\n      (if-let [last (or (get inverse-singles butlast-num)\n                        (get inverse-tens butlast-num))]\n        (concat (drop-last 2 num) [:and] (take-last 2 num))\n        num))))&quot;, :offset 435, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(defn insert-and [num]\n  (let [last-num (last num)\n        butlast-num (butlast num)]\n    (if-let [last (or (get inverse-singles last-num)\n                      (get inverse-tens last-num))]\n      (concat (drop-last num) [:and] (take-last 1 num))\n      (if-let [last (or (get inverse-singles butlast-num)\n                        (get inverse-tens butlast-num))]\n        (concat (drop-last 2 num) [:and] (take-last 2 num))\n        num))))&quot;, :offset 241, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(defn insert-and [num]\n  (cond\n    (get inverse-large-numbers-map (last (drop-last 1 num)))\n    ; add but last\n    num\n    (get inverse-large-numbers-map (last (drop-last 2 num)))\n    ; add but last 2\n    num\n    :else num))&quot;, :offset 222, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(defn insert-and [num]\n  (cond\n    (get inverse-large-numbers-map \n         (last (drop-last 1 num))) (concat (drop-last 1 num) \n                                           [:and] (take-last 1 num))\n    (get inverse-large-numbers-map \n         (last (drop-last 2 num))) (concat (drop-last 2 num) \n                                           [:and] (take-last 2 num))\n    :else num))&quot;, :offset 374, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(insert-and case3)&quot;, :offset 18, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(insert-and case2)&quot;, :offset 17, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(= \&quot;One\&quot; (num-&gt;text 1))&quot;, :offset 23, :ns &quot;num-text.core-test&quot;} {:command &quot;(deftest external-layer\n  (testing \&quot;for a sample of known correct values\&quot;\n    (is (and\n          (= \&quot;One\&quot; (num-&gt;text 1))\n          (= \&quot;Ten\&quot; (num-&gt;text 10))\n          (= \&quot;Nineteen\&quot; (num-&gt;text 19))\n          (= \&quot;Eighty five\&quot;\n             (num-&gt;text 85))\n          (= \&quot;Eight hundred and fifty nine\&quot;\n             (num-&gt;text 859))\n          (= \&quot;Seven thousand five hundred and eighty nine\&quot;\n             (num-&gt;text 7589))\n          (= \&quot;Sixty five thousand seven hundred and eighty nine\&quot;\n             (num-&gt;text 65789))\n          (= \&quot;Seven hundred and fifty six thousand seven hundred and eighty nine\&quot;\n             (num-&gt;text 756789))\n          (= \&quot;Four million two hundred and fifty six thousand seven hundred and eighty nine\&quot;\n             (num-&gt;text 4256789))\n          (= \&quot;Thirty two million four hundred and fifty six thousand seven hundred and eighty nine\&quot;\n             (num-&gt;text 32456789))\n          (= \&quot;One hundred and twenty three million four hundred and fifty six thousand seven hundred and eighty nine\&quot;\n             (num-&gt;text 123456789))))))&quot;, :offset 1047, :ns &quot;num-text.core-test&quot;} {:command &quot;(num-text 859)&quot;, :offset 14, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(insert-and case1)&quot;, :offset 17, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(num-&gt;text 859)&quot;, :offset 6, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(num-&gt;text 1002222221)&quot;, :offset 20, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(= \&quot;Eight hundred and fifty nine\&quot;\n             (num-&gt;text 859))&quot;, :offset 63, :ns &quot;num-text.core-test&quot;} {:command &quot;(= \&quot;Seven thousand five hundred and eighty nine\&quot;\n             (num-&gt;text 7589))&quot;, :offset 79, :ns &quot;num-text.core-test&quot;} {:command &quot;(num-&gt;text 7589)&quot;, :offset 16, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(num-&gt;text 756789)&quot;, :offset 18, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(:thousand inverse-large-numbers-map)&quot;, :offset 37, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(butlast [1 2 3])&quot;, :offset 17} {:command &quot;(num-&gt;text 101)&quot;, :offset 13, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(num-&gt;text 1001)&quot;, :offset 14, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(num-&gt;text 100221)&quot;, :offset 16, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(let [sample (units 100000N 1000N (dec (count large-numbers-text)))]\n  (map #(num-representation %) sample))&quot;, :offset 71, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(map #(num-representation %) (random-sample 0.1 (range 921 1000)))&quot;, :offset 61, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(map #(num-representation %) (filter odd? (random-sample 0.1 (range 921 1000))))&quot;, :offset 41, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(map #(num-representation %) (filter odd? (random-sample 0.5 (range 921 1000))))&quot;, :offset 60, :ns &quot;num-text.num-text-spec&quot;} {:command &quot;(map #(s/valid? :num/good-wc-100-to-1k %)\n     (map #(num-representation %) (range 100 1000)))&quot;, :offset 94, :ns &quot;num-text.num-text-spec&quot;}], :remote []}}</component>
</project>
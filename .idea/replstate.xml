<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1492499145023">{:repl-history {:ide [], :local [&quot;(defn nums-lt-1k\n  [num]\n  {:pre [(pos? num) (&lt; num 1000)]}\n  (if (&gt;= num 100)\n    (hundreds num)\n    (if-let [answer (get singles num)]\n      [answer]\n      (let [modulus (mod num 10)\n            tenny   (- num modulus)]\n        (if (zero? modulus)\n          [(get tens tenny)]\n          [(get tens tenny) (get singles modulus)])))))&quot; &quot;(map #(num-representation %) (range 20 99 10))&quot; &quot;(map #(num-representation %) (range 10 99 10))&quot; &quot;(apply + (map #(count (num-representation %))\n                            (range 10 99 10)))&quot; &quot;(filter odd?\n     (random-sample 0.01 (range 20 100)))\n&quot; &quot;(filter odd? (random-sample 0.1 (range 20 100)))\n&quot; &quot;(filter odd? (random-sample 0.5 (range 20 100)))\n&quot; &quot;(random-sample 0.5 (range 20 100))&quot; &quot;(filter even? (random-sample 0.1 (range 20 100)))\n&quot; &quot;(filter #(and (not (= 0 (mod % 10)) )\n              (even? %))\n        (random-sample 0.1 (range 20 100)))\n&quot; &quot;(filter #(and (not (= 0 (mod % 10)) )\n              (even? %))\n        (random-sample 0.5 (range 20 100)))\n&quot; &quot;(num-representation 123)&quot; &quot;(num-representation 223)&quot; &quot;(num-representation 299)&quot; &quot;(num-representation 999)&quot; &quot;(filter odd? (random-sample 0.1 (range 100 1000)))\n&quot; &quot;(def sample (filter odd? (random-sample 0.1 (range 100 1000))))\n&quot; &quot;(apply + (map #(count (num-representation %)) sample))&quot; &quot;(units 100 10 40)&quot; &quot;(units 100N 10N 40N)&quot; &quot;(units 100N 7N 40N)&quot; &quot;()&quot; &quot;(filter odd? (random-sample 0.1 (range 100 200)))\n&quot; &quot;(filter #(and (odd? %)) (random-sample 0.1 (range 110 200)))\n&quot; &quot;(filter odd? (random-sample 0.1 (range 110 200)))\n&quot; &quot;(filter odd? (random-sample 0.1 (range 100 110)))\n&quot; &quot;(range 100 110)&quot; &quot;(range 101 110)&quot; &quot;(range 101 120)&quot; &quot;(deftest internal-layer\n\n  (testing \&quot;for correct internal mapping numbers 1 - 19 inclusive\&quot;\n    (let [result (map #(get singles %) (range 1 20))]\n      (is (= (count result) (count (filter keyword? result))))\n      (is (= 0 (count (filter nil? result))))))\n\n  (testing \&quot;for a sample of known correct values 1 - 19\&quot;\n    (is (and (= :one (first (num-representation 1)))\n             (= :ten (first (num-representation 10)))\n             (= :nineteen (first (num-representation 19))))))\n\n  (testing \&quot;boundaries on the internal mapping of 1 - 19\&quot;\n    (is (and (= nil (singles 20))\n             (= nil (singles 0)))))\n\n  (testing \&quot;zero is rejected\&quot;\n    (is (thrown? AssertionError (num-representation 0))))\n\n  (testing \&quot;results up to 20 are a single word\&quot;\n    (is (= 20 (apply + (map #(count (num-representation %))\n                            (range 1 21))))))\n\n  (testing \&quot;results of 10, 20, 30 ... 90 are a single word\&quot;\n    (is (= 9 (apply + (map #(count (num-representation %))\n                           (range 10 99 10))))))\n\n  (testing \&quot;random odd numbers between 20 100 are two words\&quot;\n    (let [sample (filter odd? (random-sample 0.5 (range 20 100)))]\n      (is (= (* 2 (count sample))\n             (apply + (map #(count (num-representation %)) sample))))))\n\n  (testing \&quot;random even numbers (not a multiple of 10) between 20 100 are two words\&quot;\n    (let [sample (filter #(and (not (= 0 (mod % 10)))\n                               (even? %))\n                         (random-sample 0.5 (range 20 100)))]\n      (is (= (* 2 (count sample))\n             (apply + (map #(count (num-representation %)) sample))))))\n\n  (testing \&quot;numbers between 101 and 120 are five words\&quot;\n    (let [sample (range 101 120)]\n      (is (= (* 3 (count sample))\n             (apply + (map #(count (num-representation %)) sample))))))\n\n  (testing \&quot;random odd numbers between 110 and 200 are five words\&quot;\n    (let [sample (filter odd? (random-sample 0.1 (range 120 200)))]\n      (is (= (* 5 (count sample))\n             (apply + (map #(count (num-representation %)) sample))))))\n\n  )&quot; &quot;(def sample (range 101 120))\n&quot; &quot;\n(map #(num-representation %) sample)&quot; &quot;unitable&quot; &quot;(map #(+ 1N %) unitable)&quot; &quot;(map #(num-representation %) (first sample))&quot; &quot;(num-representation 1001N)&quot; &quot;(def sample (drop-last (map #(+ 1N %) unitable)))&quot; &quot;(num-representation 10000000000000000000000000000000000000000001N)&quot; &quot;(num-representation 100000000000000000000000000000000000000000001N)&quot; &quot;(num-representation 10000000000000000000000000000000000000000000001N)&quot; &quot;(num-representation 100000000000000000000000000000000000000000000001N)&quot; &quot;(num-representation 1000000000000000000000000000000000000000000000001N)&quot; &quot;(num-representation 100000000000000000000000000000000000000000000000N)&quot; &quot;unit-boundaries&quot; &quot;(num-representation 1000000000000000000000000000000000000000000000000000N)&quot; &quot;(num-representation 1000000000000000000000000000000000000000000000000N)&quot; &quot;(num-representation 1000000000000000000000000000000000000000000000N)&quot; &quot;(num-representation 1000000000000000000000000000000000000000000001N)&quot; &quot;(count large-numbers-text)&quot; &quot;(def sample (map #(+ 1N %) unitable))&quot; &quot;(map #(last (num-representation %)) sample)&quot; &quot;(filter :one (map #(last (num-representation %)) sample))&quot; &quot;(filter #(= :one) (map #(last (num-representation %)) sample))&quot; &quot;(filter #(= :one %) (map #(last (num-representation %)) sample))&quot; &quot;(count (filter #(= :one %) (map #(last (num-representation %)) sample)))&quot; &quot;(def sample (random-sample 0.1 (range 121 200)))&quot; &quot;(map #(count (num-representation %)) sample)&quot; &quot;(map #( (num-representation %)) sample)&quot; &quot;(def sample (map #(- 1N %) unitable))&quot; &quot;(def sample (map #(- % 1N) unitable))&quot; &quot;(def sample (units 10000N 1000N (count large-numbers-text)))\n&quot; &quot;sample&quot; &quot;(def sample (units 10000N 1000N (dec (count large-numbers-text))))\n&quot; &quot;(num-&gt;text 23456789)&quot; &quot;(num-&gt;text 32456789)&quot; &quot;(num-&gt;text 4256789)&quot; &quot;(num-&gt;text 5256789)&quot; &quot;(num-&gt;text 756789)&quot; &quot;(num-&gt;text 56789)&quot; &quot;(num-&gt;text 65789)&quot; &quot;(num-&gt;text 7589)&quot; &quot;(num-&gt;text 859)&quot; &quot;(num-&gt;text 95)&quot; &quot;(num-&gt;text 85)&quot; &quot;(num-&gt;text 123456789)&quot; &quot;; Generate a random sample of numbers to test it out\n(map (fn [n] [n (nums-lt-100 n)])\n     (random-sample 0.05 (range 1 100)))\n&quot; &quot;; Generate a random sample of numbers to test it out\n(map (fn [n] [n (nums-gt-100-lt-1000 n)])\n     (random-sample 0.05 (range 1 100)))\n&quot; &quot;; Generate a random sample of numbers to test it out\n(map (fn [n] [n (nums-gt-100-lt-1000 n)])\n     (random-sample 0.05 (range 100 1000)))\n&quot; &quot;; Generate a random sample of numbers to test it out\n(map (fn [n] [n (nums-gt-100-lt-1000 n)])\n     (random-sample 0.01 (range 100 1000)))\n&quot; &quot;; Generate a random sample of numbers to test it out\n(map (fn [n] [n (nums-gt-100-lt-1000 n)])\n     (random-sample 0.02 (range 100 1000)))\n&quot; &quot;; Generate a random sample of numbers to test it out\n(map (fn [n] [n (nums-gt-100-lt-1000 n)])\n     (random-sample 0.008 (range 100 1000)))\n&quot; &quot;; Generate a random sample of numbers to test it out\n(map (fn [n] [n (nums-gt-100-lt-1000 n)])\n     (random-sample 0.006 (range 100 1000)))\n&quot; &quot;; Generate a random sample of numbers to test it out\n(map (fn [n] [n (nums-gt-100-lt-1000 n)])\n     (random-sample 0.005 (range 100 1000)))\n&quot; &quot;(def sample (filter odd? (random-sample 0.1 (range 921 1000))))&quot; &quot;(map # (num-representation %) sample)&quot; &quot;(map #(num-representation %) sample)&quot; &quot;(def sample (filter odd? (random-sample 0.5 (range 921 1000))))&quot; &quot;(map #(num-representation %) \n     (filter odd? (random-sample 0.5 (range 921 1000))))&quot; &quot;(map #(num-representation %) \n     (filter odd? (random-sample 0.1 (range 921 1000))))&quot; &quot;(num-representation 756789)&quot; &quot;(let [sample (units 10000N 1000N (dec (count large-numbers-text)))]\n  (= (count sample)\n        (count (filter #(= :ten %)\n                       (map #(first (num-representation %)) sample))))\n  )&quot; &quot;(let [sample (map #(+ 1N %) unitable)]\n  (= (count sample)\n     (count (filter #(= :one %)\n                    (map #(last (num-representation %)) sample)))))&quot; &quot;(let [sample (map #(- % 1N) unitable)]\n  (= (count sample)\n     (count (filter #(= :nine %)\n                    (map #(last (num-representation %)) sample)))))&quot; &quot;(let [sample (units 10000N 1000N (dec (count large-numbers-text)))]\n  (= (count sample)\n     (count (filter #(= :ten %)\n                    (map #(first (num-representation %)) sample)))))\n\n(let [sample (units 10000N 1000N (dec (count large-numbers-text)))]\n  (= (* 2 (count sample))\n     (apply + (map #(count (num-representation %)) sample))))\n&quot; &quot;(let [sample (map #(- % 1N) unitable)]\n  (filter #(= :nine %)\n          (map #(last (num-representation %)) sample)))&quot; &quot;(let [sample (map #(+ 1N %) unitable)]\n  (filter #(= :one %)\n          (map #(last (num-representation %)) sample)))&quot; &quot;(let [sample (units 10000N 1000N (dec (count large-numbers-text)))]\n  (count (filter #(= :ten %)\n                 (map #(first (num-representation %)) sample))))\n\n(let [sample (units 10000N 1000N (dec (count large-numbers-text)))]\n  (apply + (map #(count (num-representation %)) sample)))\n&quot; &quot;(let [sample (units 10000N 1000N (dec (count large-numbers-text)))]\n  (count (filter #(= :ten %)\n                 (map #(first (num-representation %)) sample))))\n\n(let [sample (units 10000N 1000N (dec (count large-numbers-text)))]\n  (map #(count (num-representation %)) sample))\n&quot; &quot;(let [sample (units 10000N 1000N (dec (count large-numbers-text)))]\n  (filter #(= :ten %)\n          (map #(first (num-representation %)) sample)))\n\n(let [sample (units 10000N 1000N (dec (count large-numbers-text)))]\n  (map #(count (num-representation %)) sample))\n&quot; &quot;(let [sample (units 10000N 1000N (dec (count large-numbers-text)))]\n  (map #(count (num-representation %)) sample))\n&quot; &quot;(let [sample (units 10000N 1000N (dec (count large-numbers-text)))]\n  (map #(first (num-representation %)) sample))\n\n(let [sample (units 10000N 1000N (dec (count large-numbers-text)))]\n  (map #(count (num-representation %)) sample))\n&quot;], :remote []}}</component>
</project>